<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.listenup.individualassignment.controller.UserControllerTest" tests="16" skipped="0" failures="0" errors="0" timestamp="2022-06-17T01:42:48" hostname="REDICR" time="0.421">
  <properties/>
  <testcase name="getUserPathNotFound()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.021"/>
  <testcase name="getCustomerPlaylistsPathNotFound()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.018"/>
  <testcase name="getCustomerPlaylistsPath()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.014"/>
  <testcase name="addLikedPlaylist()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.026"/>
  <testcase name="removeLikedPlaylist()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.023"/>
  <testcase name="getCustomerLikedPlaylistsPath()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.017"/>
  <testcase name="getCustomerLikedSongsPath()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.019"/>
  <testcase name="getCustomerLikedPlaylistsPathNotFound()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.011"/>
  <testcase name="getAllUsers()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.022"/>
  <testcase name="updateUser()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.031"/>
  <testcase name="getCustomerLikedSongsPathNotFound()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.018"/>
  <testcase name="removeSongToCollection()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.033"/>
  <testcase name="deleteUser()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.033"/>
  <testcase name="getUserPath()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.042"/>
  <testcase name="addSongToCollection()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.039"/>
  <testcase name="getAllUsersNotFound()" classname="com.listenup.individualassignment.controller.UserControllerTest" time="0.029"/>
  <system-out><![CDATA[2022-06-17 03:42:48.267  INFO 11420 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.listenup.individualassignment.controller.UserControllerTest], using SpringBootContextLoader
2022-06-17 03:42:48.267  INFO 11420 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.listenup.individualassignment.controller.UserControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2022-06-17 03:42:48.267  INFO 11420 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.listenup.individualassignment.controller.UserControllerTest]: UserControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2022-06-17 03:42:48.285  INFO 11420 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.listenup.individualassignment.ListenUpApplication for test class com.listenup.individualassignment.controller.UserControllerTest
2022-06-17 03:42:48.285  INFO 11420 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2022-06-17 03:42:48.297  INFO 11420 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@51d25f3, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@2939c044, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@25d227bf, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@36b24827, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@5aecc1bf, org.springframework.test.context.support.DirtiesContextTestExecutionListener@3db01146, org.springframework.test.context.transaction.TransactionalTestExecutionListener@96b2690, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@2d3ca4ea, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@11e169cb, org.springframework.test.context.event.EventPublishingTestExecutionListener@2c666090, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@7c699c2a, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@343a7cb9, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2e0fe4c4, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@31727375, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1ca21bd, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@66f25a89, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@370abb57]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/profile
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getUserPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/playlists
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getCustomerPlaylistsPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/playlists
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getCustomerPlaylistsPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":1,"playlists":[]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/1/likedplaylist/add
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"46"]
             Body = {
        "id": 1,
        "playlist": null
}

    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#addLikedPlaylist(long, AddRemoveLikedPlaylistDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/1/likedplaylist/remove
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"46"]
             Body = {
        "id": 1,
        "playlist": null
}

    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#removeLikedPlaylist(long, AddRemoveLikedPlaylistDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/likedplaylists
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getCustomerLikedPlaylistsPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":1,"likedPlaylists":[]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/collection
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getCustomerLikedSongsPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":1,"likedSongs":[]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/likedplaylists
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getCustomerLikedPlaylistsPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getAllUsers()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = [{"id":1,"username":"Blue","email":"blue@gmail.com"}]
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/1/profile
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"120"]
             Body = {
        "id": 1,
        "username": "Yellow",
        "email": "yellow@gmail.com",
        "password": "123Yellow"
}

    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#updateUser(long, UpdateUserDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/collection
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getCustomerLikedSongsPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/1/collection/remove
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"42"]
             Body = {
        "id": 1,
        "song": null
}

    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#removeSongToCollection(long, AddRemoveSongToCollectionDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /users/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#deleteUser(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1/profile
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getUserPath(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"id":1,"username":"Blue","email":"blue@gmail.com","password":"123Blue"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/1/collection/add
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"42"]
             Body = {
        "id": 1,
        "song": null
}

    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#addSongToCollection(long, AddRemoveSongToCollectionDTO)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 204
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.listenup.individualassignment.controller.UserController
           Method = com.listenup.individualassignment.controller.UserController#getAllUsers()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", X-Content-Type-Options:"nosniff", X-XSS-Protection:"1; mode=block", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
